package com.ampletec.commons.lang;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.PrintStream;


@Deprecated
public final class ThrowableUtil {
	
	private ThrowableUtil() { }

    /**
     * Set the {@link StackTraceElement} for the given {@link Throwable}, using the {@link Class} and method name.
     */
    public static <T extends Throwable> T unknownStackTrace(T cause, Class<?> clazz, String method) {
        cause.setStackTrace(new StackTraceElement[] { new StackTraceElement(clazz.getName(), method, null, -1)});
        return cause;
    }

    /**
     * Gets the stack trace from a Throwable as a String.
     *
     * @param cause the {@link Throwable} to be examined
     * @return the stack trace as generated by {@link Throwable#printStackTrace(java.io.PrintWriter)} method.
     */
    public static String stackTraceToString2(Throwable cause) {
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        PrintStream pout = new PrintStream(out);
        cause.printStackTrace(pout);
        pout.flush();
        try {
            return new String(out.toByteArray());
        } finally {
            try {
                out.close();
            } catch (IOException ignore) {
                // ignore as should never happen
            }
        }
    }
    
    public static String stackTraceToString(Throwable cause) {
    	return ThrowableUtil.getStackTrace(cause);
    }

	public static String getStackTrace(Throwable cause) {
		StringBuilder sf = new StringBuilder(4096);
		sf.append(cause.toString()).append("\n");
		StackTraceElement[] trace = cause.getStackTrace();
		for (int i = 0; i < trace.length; i++)
			sf.append("\tat ").append(trace[i]).append("\n");
		return sf.toString();
	}
}
